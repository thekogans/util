<thekogans_make organization = "thekogans"
                project = "util"
                project_type = "library"
                major_version = "0"
                minor_version = "37"
                patch_version = "1"
                guid = "e541acd69d9d020f7eac98d5bf9e0d7a"
                schema_version = "2">
  <features>
    <feature>THEKOGANS_UTIL_HAVE_XERCES</feature>
    <feature>THEKOGANS_UTIL_HAVE_ZLIB</feature>
    <if condition = "$(TOOLCHAIN_OS) == 'Linux'">
      <feature>THEKOGANS_UTIL_HAVE_XLIB</feature>
    </if>
    <feature>THEKOGANS_UTIL_HAVE_TESTS</feature>
    <if condition = "$(TOOLCHAIN_OS) != 'Windows'">
      <feature>THEKOGANS_UTIL_HAVE_MMAP</feature>
    </if>
    <!-- Uncomment this feature to use Windows WTS functionality.
        <if condition = "$(TOOLCHAIN_OS) == 'Windows'">
          <feature>THEKOGANS_UTIL_HAVE_WTS</feature>
        </if>
    -->
  </features>
  <dependencies>
    <if condition = "$(have_feature -f:THEKOGANS_UTIL_HAVE_XERCES)">
      <toolchain organization = "thekogans"
                 name = "xerces"/>
    </if>
    <if condition = "$(have_feature -f:THEKOGANS_UTIL_HAVE_ZLIB)">
      <toolchain organization = "thekogans"
                 name = "zlib"/>
    </if>
    <if condition = "$(have_feature -f:THEKOGANS_UTIL_HAVE_TESTS)">
      <toolchain organization = "thekogans"
                 name = "CppUnitXLite"/>
    </if>
    <choose>
      <when condition = "$(TOOLCHAIN_OS) == 'Windows'">
        <library>Ws2_32.lib</library>
        <library>Iphlpapi.lib</library>
        <library>mpr.lib</library>
        <library>Wtsapi32.lib</library>
        <if condition = "!$(have_feature -f:THEKOGANS_UTIL_HAVE_WTS)">
          <library>Advapi32.lib</library>
        </if>
        <library>ole32.lib</library>
        <library>oleaut32.lib</library>
      </when>
      <when condition = "$(TOOLCHAIN_OS) == 'Linux'">
        <library>pthread</library>
        <library>rt</library>
        <library>dl</library>
        <if condition = "$(have_feature -f:THEKOGANS_UTIL_HAVE_XLIB)">
          <library>X11</library>
        </if>
      </when>
      <when condition = "$(TOOLCHAIN_OS) == 'OSX'">
        <library>pthread</library>
        <framework>Foundation</framework>
        <framework>Security</framework>
        <framework>Cocoa</framework>
        <framework>CoreFoundation</framework>
        <framework>CoreServices</framework>
        <framework>CoreGraphics</framework>
        <framework>SystemConfiguration</framework>
        <framework>IOKit</framework>
      </when>
    </choose>
  </dependencies>
  <cpp_preprocessor_definitions>
    <if condition = "$(TOOLCHAIN_OS) == 'Windows'">
      <cpp_preprocessor_definition>_CRT_SECURE_NO_WARNINGS</cpp_preprocessor_definition>
    </if>
  </cpp_preprocessor_definitions>
  <cpp_headers prefix = "include"
               install = "yes">
    <cpp_header>$(organization)/$(project_directory)/AlignedAllocator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Allocator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Array.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/BTree.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Barrier.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Base64.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/BitSet.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/BlockAllocator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Buffer.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/ByteSwap.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/ChildProcess.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/CommandLineOptions.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Condition.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Config.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Console.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/ConsoleLogger.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Constants.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/CPU.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/CRC32.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/DefaultAllocator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Directory.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/DynamicCreatable.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/DynamicLibrary.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Event.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Exception.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/File.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/FileAllocator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/FileLogger.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/FixedArray.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/FixedBuffer.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Flags.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Fraction.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/GUID.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/HRTimer.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/HRTimerMgr.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Hash.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Heap.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/IntrusiveList.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/JSON.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/JobQueue.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/JobQueuePool.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/LockGuard.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Logger.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/LoggerMgr.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/MD5.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/MainRunLoop.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/MemoryLogger.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/MimeTypeMapper.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Mutex.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/NullAllocator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/NullLock.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/NullLogger.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/OwnerList.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/OwnerMap.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/OwnerVector.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Path.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Pipeline.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/PipelinePool.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Plugins.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Point.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Producer.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RandomSource.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Rectangle.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RecursiveLock.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RefCounted.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RefCountedRegistry.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RunLoop.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RunLoopScheduler.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RWLock.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/RWLockGuard.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Scheduler.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SecureAllocator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Semaphore.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Serializable.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SerializableString.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Serializer.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SHA1.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SHA2.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SHA2_224_256.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SHA2_384_512.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SHA3.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SharedAllocator.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SharedObject.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Singleton.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SizeT.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SpinLock.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SpinRWLock.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/StringUtils.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Subscriber.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SystemInfo.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/SystemRunLoop.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Thread.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/ThreadRunLoop.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/TimeSpec.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Timer.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Types.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/ValueParser.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Variant.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Vectorizer.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/Version.h</cpp_header>
    <cpp_header>$(organization)/$(project_directory)/XMLUtils.h</cpp_header>
    <if condition = "$(have_feature -f:THEKOGANS_UTIL_HAVE_XERCES)">
      <cpp_header>$(organization)/$(project_directory)/XercesUtils.h</cpp_header>
    </if>
    <cpp_header>$(organization)/$(project_directory)/os/RunLoop.h</cpp_header>
    <choose>
      <when condition = "$(TOOLCHAIN_OS) == 'Windows'">
        <cpp_header>$(organization)/$(project_directory)/os/windows/HGLOBALAllocator.h</cpp_header>
        <cpp_header>$(organization)/$(project_directory)/os/windows/HeapAllocator.h</cpp_header>
        <cpp_header>$(organization)/$(project_directory)/os/windows/OutputDebugStringLogger.h</cpp_header>
        <cpp_header>$(organization)/$(project_directory)/os/windows/WindowsFirewall.h</cpp_header>
        <cpp_header>$(organization)/$(project_directory)/os/windows/WindowsUtils.h</cpp_header>
      </when>
      <when condition = "$(TOOLCHAIN_OS) == 'Linux'">
        <cpp_header>$(organization)/$(project_directory)/os/linux/LinuxUtils.h</cpp_header>
        <if condition = "$(have_feature -f:THEKOGANS_UTIL_HAVE_XLIB)">
          <cpp_header>$(organization)/$(project_directory)/os/linux/XlibUtils.h</cpp_header>
        </if>
      </when>
      <when condition = "$(TOOLCHAIN_OS) == 'OSX'">
        <cpp_header>$(organization)/$(project_directory)/os/osx/NSLogLogger.h</cpp_header>
      </when>
    </choose>
  </cpp_headers>
  <cpp_headers prefix = "include/3rdparty"
               install = "yes">
    <cpp_header>pugixml/pugiconfig.hpp</cpp_header>
    <cpp_header>pugixml/pugixml.hpp</cpp_header>
  </cpp_headers>
  <!-- Just enough boost to make custom SharedAllocator::Lock work. -->
  <cpp_headers prefix = "include/3rdparty/private"
               install = "no">
    <cpp_header>boost/atomic.hpp</cpp_header>
    <cpp_header>boost/atomic/atomic.hpp</cpp_header>
    <cpp_header>boost/atomic/atomic_flag.hpp</cpp_header>
    <cpp_header>boost/atomic/capabilities.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/atomic_flag.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/atomic_template.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/bitwise_cast.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_gcc_alpha.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_gcc_arm.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_gcc_atomic.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_gcc_ppc.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_gcc_sparc.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_gcc_sync.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_gcc_x86.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_linux_arm.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_msvc_arm.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_msvc_x86.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/caps_windows.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/config.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/int_sizes.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/interlocked.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/link.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/lockpool.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/operations.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/operations_fwd.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/operations_lockfree.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_cas_based.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_emulated.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_extending_cas_based.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_gcc_alpha.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_gcc_arm.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_gcc_atomic.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_gcc_ppc.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_gcc_sparc.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_gcc_sync.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_gcc_x86.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_gcc_x86_dcas.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_linux_arm.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_msvc_arm.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_msvc_common.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_msvc_x86.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/ops_windows.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/pause.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/platform.hpp</cpp_header>
    <cpp_header>boost/atomic/detail/storage_type.hpp</cpp_header>
    <cpp_header>boost/atomic/fences.hpp</cpp_header>
    <cpp_header>boost/memory_order.hpp</cpp_header>
    <cpp_header>boost/config/abi/borland_prefix.hpp</cpp_header>
    <cpp_header>boost/config/abi/borland_suffix.hpp</cpp_header>
    <cpp_header>boost/config/abi/msvc_prefix.hpp</cpp_header>
    <cpp_header>boost/config/abi/msvc_suffix.hpp</cpp_header>
    <cpp_header>boost/config/abi_prefix.hpp</cpp_header>
    <cpp_header>boost/config/abi_suffix.hpp</cpp_header>
    <cpp_header>boost/config/auto_link.hpp</cpp_header>
    <cpp_header>boost/config/compiler/borland.hpp</cpp_header>
    <cpp_header>boost/config/compiler/clang.hpp</cpp_header>
    <cpp_header>boost/config/compiler/codegear.hpp</cpp_header>
    <cpp_header>boost/config/compiler/comeau.hpp</cpp_header>
    <cpp_header>boost/config/compiler/common_edg.hpp</cpp_header>
    <cpp_header>boost/config/compiler/compaq_cxx.hpp</cpp_header>
    <cpp_header>boost/config/compiler/cray.hpp</cpp_header>
    <cpp_header>boost/config/compiler/digitalmars.hpp</cpp_header>
    <cpp_header>boost/config/compiler/gcc.hpp</cpp_header>
    <cpp_header>boost/config/compiler/gcc_xml.hpp</cpp_header>
    <cpp_header>boost/config/compiler/greenhills.hpp</cpp_header>
    <cpp_header>boost/config/compiler/hp_acc.hpp</cpp_header>
    <cpp_header>boost/config/compiler/intel.hpp</cpp_header>
    <cpp_header>boost/config/compiler/kai.hpp</cpp_header>
    <cpp_header>boost/config/compiler/metrowerks.hpp</cpp_header>
    <cpp_header>boost/config/compiler/mpw.hpp</cpp_header>
    <cpp_header>boost/config/compiler/nvcc.hpp</cpp_header>
    <cpp_header>boost/config/compiler/pathscale.hpp</cpp_header>
    <cpp_header>boost/config/compiler/pgi.hpp</cpp_header>
    <cpp_header>boost/config/compiler/sgi_mipspro.hpp</cpp_header>
    <cpp_header>boost/config/compiler/sunpro_cc.hpp</cpp_header>
    <cpp_header>boost/config/compiler/vacpp.hpp</cpp_header>
    <cpp_header>boost/config/compiler/visualc.hpp</cpp_header>
    <cpp_header>boost/config/compiler/xlcpp.hpp</cpp_header>
    <cpp_header>boost/config/no_tr1/cmath.hpp</cpp_header>
    <cpp_header>boost/config/no_tr1/complex.hpp</cpp_header>
    <cpp_header>boost/config/no_tr1/functional.hpp</cpp_header>
    <cpp_header>boost/config/no_tr1/memory.hpp</cpp_header>
    <cpp_header>boost/config/no_tr1/utility.hpp</cpp_header>
    <cpp_header>boost/config/platform/aix.hpp</cpp_header>
    <cpp_header>boost/config/platform/amigaos.hpp</cpp_header>
    <cpp_header>boost/config/platform/beos.hpp</cpp_header>
    <cpp_header>boost/config/platform/bsd.hpp</cpp_header>
    <cpp_header>boost/config/platform/cloudabi.hpp</cpp_header>
    <cpp_header>boost/config/platform/cray.hpp</cpp_header>
    <cpp_header>boost/config/platform/cygwin.hpp</cpp_header>
    <cpp_header>boost/config/platform/haiku.hpp</cpp_header>
    <cpp_header>boost/config/platform/hpux.hpp</cpp_header>
    <cpp_header>boost/config/platform/irix.hpp</cpp_header>
    <cpp_header>boost/config/platform/linux.hpp</cpp_header>
    <cpp_header>boost/config/platform/macos.hpp</cpp_header>
    <cpp_header>boost/config/platform/qnxnto.hpp</cpp_header>
    <cpp_header>boost/config/platform/solaris.hpp</cpp_header>
    <cpp_header>boost/config/platform/symbian.hpp</cpp_header>
    <cpp_header>boost/config/platform/vms.hpp</cpp_header>
    <cpp_header>boost/config/platform/vxworks.hpp</cpp_header>
    <cpp_header>boost/config/platform/win32.hpp</cpp_header>
    <cpp_header>boost/config/posix_features.hpp</cpp_header>
    <cpp_header>boost/config/requires_threads.hpp</cpp_header>
    <cpp_header>boost/config/select_compiler_config.hpp</cpp_header>
    <cpp_header>boost/config/select_platform_config.hpp</cpp_header>
    <cpp_header>boost/config/select_stdlib_config.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/dinkumware.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/libcomo.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/libcpp.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/libstdcpp3.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/modena.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/msl.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/roguewave.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/sgi.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/stlport.hpp</cpp_header>
    <cpp_header>boost/config/stdlib/vacpp.hpp</cpp_header>
    <cpp_header>boost/config/suffix.hpp</cpp_header>
    <cpp_header>boost/config/user.hpp</cpp_header>
    <cpp_header>boost/config/warning_disable.hpp</cpp_header>
    <cpp_header>boost/config.hpp</cpp_header>
    <cpp_header>boost/cstdint.hpp</cpp_header>
    <cpp_header>boost/detail/algorithm.hpp</cpp_header>
    <cpp_header>boost/detail/allocator_utilities.hpp</cpp_header>
    <cpp_header>boost/detail/atomic_count.hpp</cpp_header>
    <cpp_header>boost/detail/atomic_redef_macros.hpp</cpp_header>
    <cpp_header>boost/detail/atomic_undef_macros.hpp</cpp_header>
    <cpp_header>boost/detail/basic_pointerbuf.hpp</cpp_header>
    <cpp_header>boost/detail/binary_search.hpp</cpp_header>
    <cpp_header>boost/detail/bitmask.hpp</cpp_header>
    <cpp_header>boost/detail/call_traits.hpp</cpp_header>
    <cpp_header>boost/detail/catch_exceptions.hpp</cpp_header>
    <cpp_header>boost/detail/compressed_pair.hpp</cpp_header>
    <cpp_header>boost/detail/container_fwd.hpp</cpp_header>
    <cpp_header>boost/detail/dynamic_bitset.hpp</cpp_header>
    <cpp_header>boost/detail/endian.hpp</cpp_header>
    <cpp_header>boost/detail/fenv.hpp</cpp_header>
    <cpp_header>boost/detail/has_default_constructor.hpp</cpp_header>
    <cpp_header>boost/detail/identifier.hpp</cpp_header>
    <cpp_header>boost/detail/indirect_traits.hpp</cpp_header>
    <cpp_header>boost/detail/interlocked.hpp</cpp_header>
    <cpp_header>boost/detail/is_incrementable.hpp</cpp_header>
    <cpp_header>boost/detail/is_sorted.hpp</cpp_header>
    <cpp_header>boost/detail/is_xxx.hpp</cpp_header>
    <cpp_header>boost/detail/iterator.hpp</cpp_header>
    <cpp_header>boost/detail/lcast_precision.hpp</cpp_header>
    <cpp_header>boost/detail/lightweight_main.hpp</cpp_header>
    <cpp_header>boost/detail/lightweight_mutex.hpp</cpp_header>
    <cpp_header>boost/detail/lightweight_test.hpp</cpp_header>
    <cpp_header>boost/detail/lightweight_test_report.hpp</cpp_header>
    <cpp_header>boost/detail/lightweight_thread.hpp</cpp_header>
    <cpp_header>boost/detail/named_template_params.hpp</cpp_header>
    <cpp_header>boost/detail/no_exceptions_support.hpp</cpp_header>
    <cpp_header>boost/detail/numeric_traits.hpp</cpp_header>
    <cpp_header>boost/detail/ob_compressed_pair.hpp</cpp_header>
    <cpp_header>boost/detail/quick_allocator.hpp</cpp_header>
    <cpp_header>boost/detail/reference_content.hpp</cpp_header>
    <cpp_header>boost/detail/scoped_enum_emulation.hpp</cpp_header>
    <cpp_header>boost/detail/select_type.hpp</cpp_header>
    <cpp_header>boost/detail/sp_typeinfo.hpp</cpp_header>
    <cpp_header>boost/detail/templated_streams.hpp</cpp_header>
    <cpp_header>boost/detail/utf8_codecvt_facet.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/apc.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/basic_types.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/condition_variable.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/config.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/critical_section.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/crypt.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/detail/cast_ptr.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/directory_management.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/dll.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/error_handling.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/event.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/file_management.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/file_mapping.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/GetCurrentProcess.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/GetCurrentThread.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/GetLastError.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/GetProcessTimes.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/GetThreadTimes.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/handles.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/heap_memory.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/init_once.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/local_memory.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/memory.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/mutex.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/process.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/security.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/semaphore.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/srw_lock.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/synchronization.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/system.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/thread.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/thread_pool.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/time.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/timers.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/tls.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/wait.hpp</cpp_header>
    <cpp_header>boost/detail/winapi/waitable_timer.hpp</cpp_header>
    <cpp_header>boost/detail/workaround.hpp</cpp_header>
    <cpp_header>boost/limits.hpp</cpp_header>
    <cpp_header>boost/type_traits/add_const.hpp</cpp_header>
    <cpp_header>boost/type_traits/add_cv.hpp</cpp_header>
    <cpp_header>boost/type_traits/add_lvalue_reference.hpp</cpp_header>
    <cpp_header>boost/type_traits/add_pointer.hpp</cpp_header>
    <cpp_header>boost/type_traits/add_reference.hpp</cpp_header>
    <cpp_header>boost/type_traits/add_rvalue_reference.hpp</cpp_header>
    <cpp_header>boost/type_traits/add_volatile.hpp</cpp_header>
    <cpp_header>boost/type_traits/aligned_storage.hpp</cpp_header>
    <cpp_header>boost/type_traits/alignment_of.hpp</cpp_header>
    <cpp_header>boost/type_traits/alignment_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/arithmetic_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/array_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/broken_compiler_spec.hpp</cpp_header>
    <cpp_header>boost/type_traits/common_type.hpp</cpp_header>
    <cpp_header>boost/type_traits/composite_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/conditional.hpp</cpp_header>
    <cpp_header>boost/type_traits/config.hpp</cpp_header>
    <cpp_header>boost/type_traits/conversion_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/copy_cv.hpp</cpp_header>
    <cpp_header>boost/type_traits/cv_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/decay.hpp</cpp_header>
    <cpp_header>boost/type_traits/declval.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/bool_trait_def.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/bool_trait_undef.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/common_arithmetic_type.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/common_type_impl.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/composite_member_pointer_type.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/composite_pointer_type.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/config.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/has_binary_operator.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/has_postfix_operator.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/has_prefix_operator.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/ice_and.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/ice_eq.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/ice_not.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/ice_or.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/is_function_ptr_helper.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/is_function_ptr_tester.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/is_mem_fun_pointer_impl.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/is_mem_fun_pointer_tester.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/mp_defer.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/template_arity_spec.hpp</cpp_header>
    <cpp_header>boost/type_traits/detail/yes_no_type.hpp</cpp_header>
    <cpp_header>boost/type_traits/extent.hpp</cpp_header>
    <cpp_header>boost/type_traits/floating_point_promotion.hpp</cpp_header>
    <cpp_header>boost/type_traits/function_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_bit_and.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_bit_and_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_bit_or.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_bit_or_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_bit_xor.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_bit_xor_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_complement.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_dereference.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_divides.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_divides_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_equal_to.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_greater.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_greater_equal.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_left_shift.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_left_shift_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_less.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_less_equal.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_logical_and.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_logical_not.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_logical_or.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_minus.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_minus_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_modulus.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_modulus_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_multiplies.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_multiplies_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_negate.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_new_operator.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_not_equal_to.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_nothrow_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_nothrow_constructor.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_nothrow_copy.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_nothrow_destructor.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_operator.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_plus.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_plus_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_post_decrement.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_post_increment.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_pre_decrement.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_pre_increment.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_right_shift.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_right_shift_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_trivial_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_trivial_constructor.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_trivial_copy.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_trivial_destructor.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_trivial_move_assign.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_trivial_move_constructor.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_unary_minus.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_unary_plus.hpp</cpp_header>
    <cpp_header>boost/type_traits/has_virtual_destructor.hpp</cpp_header>
    <cpp_header>boost/type_traits/ice.hpp</cpp_header>
    <cpp_header>boost/type_traits/integral_constant.hpp</cpp_header>
    <cpp_header>boost/type_traits/integral_promotion.hpp</cpp_header>
    <cpp_header>boost/type_traits/intrinsics.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_abstract.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_arithmetic.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_array.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_assignable.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_base_and_derived.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_base_of.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_base_of_tr1.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_class.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_complex.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_compound.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_const.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_constructible.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_convertible.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_copy_assignable.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_copy_constructible.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_default_constructible.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_destructible.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_empty.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_enum.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_final.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_float.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_floating_point.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_function.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_fundamental.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_integral.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_lvalue_reference.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_member_function_pointer.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_member_object_pointer.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_member_pointer.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_nothrow_move_assignable.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_nothrow_move_constructible.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_object.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_pod.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_pointer.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_polymorphic.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_reference.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_rvalue_reference.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_same.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_scalar.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_signed.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_stateless.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_union.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_unsigned.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_virtual_base_of.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_void.hpp</cpp_header>
    <cpp_header>boost/type_traits/is_volatile.hpp</cpp_header>
    <cpp_header>boost/type_traits/make_signed.hpp</cpp_header>
    <cpp_header>boost/type_traits/make_unsigned.hpp</cpp_header>
    <cpp_header>boost/type_traits/object_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/promote.hpp</cpp_header>
    <cpp_header>boost/type_traits/rank.hpp</cpp_header>
    <cpp_header>boost/type_traits/reference_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/remove_all_extents.hpp</cpp_header>
    <cpp_header>boost/type_traits/remove_bounds.hpp</cpp_header>
    <cpp_header>boost/type_traits/remove_const.hpp</cpp_header>
    <cpp_header>boost/type_traits/remove_cv.hpp</cpp_header>
    <cpp_header>boost/type_traits/remove_extent.hpp</cpp_header>
    <cpp_header>boost/type_traits/remove_pointer.hpp</cpp_header>
    <cpp_header>boost/type_traits/remove_reference.hpp</cpp_header>
    <cpp_header>boost/type_traits/remove_volatile.hpp</cpp_header>
    <cpp_header>boost/type_traits/same_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/transform_traits.hpp</cpp_header>
    <cpp_header>boost/type_traits/type_identity.hpp</cpp_header>
    <cpp_header>boost/type_traits/type_with_alignment.hpp</cpp_header>
    <cpp_header>boost/version.hpp</cpp_header>
    <cpp_header>boost/core/typeinfo.hpp</cpp_header>
    <cpp_header>boost/core/scoped_enum.hpp</cpp_header>
    <cpp_header>boost/core/enable_if.hpp</cpp_header>
    <cpp_header>boost/core/ignore_unused.hpp</cpp_header>
    <cpp_header>boost/core/explicit_operator_bool.hpp</cpp_header>
    <cpp_header>boost/core/checked_delete.hpp</cpp_header>
    <cpp_header>boost/core/noncopyable.hpp</cpp_header>
    <cpp_header>boost/core/no_exceptions_support.hpp</cpp_header>
    <cpp_header>boost/core/swap.hpp</cpp_header>
    <cpp_header>boost/core/addressof.hpp</cpp_header>
    <cpp_header>boost/core/ref.hpp</cpp_header>
    <cpp_header>boost/core/demangle.hpp</cpp_header>
    <cpp_header>boost/core/null_deleter.hpp</cpp_header>
    <cpp_header>boost/core/lightweight_test.hpp</cpp_header>
    <cpp_header>boost/core/is_same.hpp</cpp_header>
    <cpp_header>boost/core/lightweight_test_trait.hpp</cpp_header>
    <cpp_header>boost/core/underlying_type.hpp</cpp_header>
    <cpp_header>boost/noncopyable.hpp</cpp_header>
    <cpp_header>boost/static_assert.hpp</cpp_header>
    <cpp_header>boost/type_traits.hpp</cpp_header>
    <cpp_header>boost/utility/binary.hpp</cpp_header>
    <cpp_header>boost/utility/base_from_member.hpp</cpp_header>
    <cpp_header>boost/utility/identity_type.hpp</cpp_header>
    <cpp_header>boost/utility/compare_pointees.hpp</cpp_header>
    <cpp_header>boost/utility/value_init.hpp</cpp_header>
    <cpp_header>boost/utility/in_place_factory.hpp</cpp_header>
    <cpp_header>boost/utility/string_ref_fwd.hpp</cpp_header>
    <cpp_header>boost/utility/string_ref.hpp</cpp_header>
    <cpp_header>boost/utility/result_of.hpp</cpp_header>
    <cpp_header>boost/utility/empty_deleter.hpp</cpp_header>
    <cpp_header>boost/utility/enable_if.hpp</cpp_header>
    <cpp_header>boost/utility/typed_in_place_factory.hpp</cpp_header>
    <cpp_header>boost/utility/explicit_operator_bool.hpp</cpp_header>
    <cpp_header>boost/utility/swap.hpp</cpp_header>
    <cpp_header>boost/utility/declval.hpp</cpp_header>
    <cpp_header>boost/utility/addressof.hpp</cpp_header>
    <cpp_header>boost/utility/detail/in_place_factory_suffix.hpp</cpp_header>
    <cpp_header>boost/utility/detail/in_place_factory_prefix.hpp</cpp_header>
    <cpp_header>boost/utility/detail/result_of_iterate.hpp</cpp_header>
  </cpp_headers>
  <cpp_sources prefix = "src">
    <cpp_source>AlignedAllocator.cpp</cpp_source>
    <cpp_source>Allocator.cpp</cpp_source>
    <cpp_source>BTree.cpp</cpp_source>
    <cpp_source>Barrier.cpp</cpp_source>
    <cpp_source>Base64.cpp</cpp_source>
    <cpp_source>BitSet.cpp</cpp_source>
    <cpp_source>BlockAllocator.cpp</cpp_source>
    <cpp_source>Buffer.cpp</cpp_source>
    <cpp_source>ChildProcess.cpp</cpp_source>
    <cpp_source>CommandLineOptions.cpp</cpp_source>
    <cpp_source>Condition.cpp</cpp_source>
    <cpp_source>Console.cpp</cpp_source>
    <cpp_source>ConsoleLogger.cpp</cpp_source>
    <cpp_source>CPU.cpp</cpp_source>
    <cpp_source>CRC32.cpp</cpp_source>
    <cpp_source>DefaultAllocator.cpp</cpp_source>
    <cpp_source>Directory.cpp</cpp_source>
    <cpp_source>DynamicCreatable.cpp</cpp_source>
    <cpp_source>DynamicLibrary.cpp</cpp_source>
    <cpp_source>Event.cpp</cpp_source>
    <cpp_source>Exception.cpp</cpp_source>
    <cpp_source>File.cpp</cpp_source>
    <cpp_source>FileAllocator.cpp</cpp_source>
    <cpp_source>FileLogger.cpp</cpp_source>
    <cpp_source>Fraction.cpp</cpp_source>
    <cpp_source>GUID.cpp</cpp_source>
    <cpp_source>HRTimer.cpp</cpp_source>
    <cpp_source>HRTimerMgr.cpp</cpp_source>
    <cpp_source>Hash.cpp</cpp_source>
    <cpp_source>Heap.cpp</cpp_source>
    <cpp_source>JSON.cpp</cpp_source>
    <cpp_source>JobQueue.cpp</cpp_source>
    <cpp_source>JobQueuePool.cpp</cpp_source>
    <cpp_source>Logger.cpp</cpp_source>
    <cpp_source>LoggerMgr.cpp</cpp_source>
    <cpp_source>MD5.cpp</cpp_source>
    <cpp_source>MemoryLogger.cpp</cpp_source>
    <cpp_source>MimeTypeMapper.cpp</cpp_source>
    <cpp_source>Mutex.cpp</cpp_source>
    <cpp_source>NullAllocator.cpp</cpp_source>
    <cpp_source>NullLock.cpp</cpp_source>
    <cpp_source>NullLogger.cpp</cpp_source>
    <cpp_source>Path.cpp</cpp_source>
    <cpp_source>Pipeline.cpp</cpp_source>
    <cpp_source>PipelinePool.cpp</cpp_source>
    <cpp_source>Plugins.cpp</cpp_source>
    <cpp_source>Point.cpp</cpp_source>
    <cpp_source>RandomSource.cpp</cpp_source>
    <cpp_source>Rectangle.cpp</cpp_source>
    <cpp_source>RefCounted.cpp</cpp_source>
    <cpp_source>RunLoop.cpp</cpp_source>
    <cpp_source>RunLoopScheduler.cpp</cpp_source>
    <cpp_source>RWLock.cpp</cpp_source>
    <cpp_source>Scheduler.cpp</cpp_source>
    <cpp_source>SecureAllocator.cpp</cpp_source>
    <cpp_source>Semaphore.cpp</cpp_source>
    <cpp_source>Serializable.cpp</cpp_source>
    <cpp_source>SerializableString.cpp</cpp_source>
    <cpp_source>Serializer.cpp</cpp_source>
    <cpp_source>SHA1.cpp</cpp_source>
    <cpp_source>SHA2.cpp</cpp_source>
    <cpp_source>SHA2_224_256.cpp</cpp_source>
    <cpp_source>SHA2_384_512.cpp</cpp_source>
    <cpp_source>SHA3.cpp</cpp_source>
    <cpp_source>SharedAllocator.cpp</cpp_source>
    <cpp_source>SharedObject.cpp</cpp_source>
    <cpp_source>SizeT.cpp</cpp_source>
    <cpp_source>SpinLock.cpp</cpp_source>
    <cpp_source>SpinRWLock.cpp</cpp_source>
    <cpp_source>StringUtils.cpp</cpp_source>
    <cpp_source>SystemInfo.cpp</cpp_source>
    <cpp_source>Thread.cpp</cpp_source>
    <cpp_source>ThreadRunLoop.cpp</cpp_source>
    <cpp_source>Timer.cpp</cpp_source>
    <cpp_source>TimeSpec.cpp</cpp_source>
    <cpp_source>ValueParser.cpp</cpp_source>
    <cpp_source>Variant.cpp</cpp_source>
    <cpp_source>Vectorizer.cpp</cpp_source>
    <cpp_source>Version.cpp</cpp_source>
    <cpp_source>XMLUtils.cpp</cpp_source>
    <if condition = "$(have_feature -f:THEKOGANS_UTIL_HAVE_XERCES)">
      <cpp_source>XercesUtils.cpp</cpp_source>
    </if>
    <choose>
      <when condition = "$(TOOLCHAIN_OS) == 'Windows'">
        <cpp_source>os/windows/HGLOBALAllocator.cpp</cpp_source>>
        <cpp_source>os/windows/HeapAllocator.cpp</cpp_source>>
        <cpp_source>os/windows/OutputDebugStringLogger.cpp</cpp_source>
        <cpp_source>os/windows/WindowsFirewall.cpp</cpp_source>
        <cpp_source>os/windows/WindowsUtils.cpp</cpp_source>
      </when>
      <when condition = "$(TOOLCHAIN_OS) == 'Linux'">
        <if condition = "$(have_feature -f:THEKOGANS_UTIL_HAVE_XLIB)">
          <cpp_source>os/linux/XlibUtils.cpp</cpp_source>
        </if>
      </when>
      <when condition = "$(TOOLCHAIN_OS) == 'OSX'">
        <cpp_source>os/osx/NSLogLogger.cpp</cpp_source>
      </when>
    </choose>
  </cpp_sources>
  <cpp_sources prefix = "src/3rdparty">
    <cpp_source>pugixml/pugixml.cpp</cpp_source>
  </cpp_sources>
  <cpp_sources prefix = "src/3rdparty">
    <cpp_source>boost/atomic/lockpool.cpp</cpp_source>
  </cpp_sources>
  <if condition = "$(TOOLCHAIN_OS) == 'OSX'">
    <objective_cpp_headers prefix = "include"
                           install = "yes">
      <objective_cpp_header>$(organization)/$(project_directory)/os/osx/OSXUtils.h</objective_cpp_header>
    </objective_cpp_headers>
    <objective_cpp_sources prefix = "src">
      <objective_cpp_source>os/osx/OSXUtils.mm</objective_cpp_source>
    </objective_cpp_sources>
  </if>
  <if condition = "$(have_feature -f:THEKOGANS_UTIL_HAVE_TESTS)">
    <cpp_tests prefix = "tests">
      <!--
      <cpp_test>test_RefCounted.cpp</cpp_test>
      <cpp_test>test_SharedAllocator.cpp</cpp_test>
      <cpp_test>test_SpinLock.cpp</cpp_test>
      <cpp_test>test_SpinRWLock.cpp</cpp_test>
      <cpp_test>test_Version.cpp</cpp_test>
      -->
    </cpp_tests>
  </if>
  <resources prefix = "resources"
             install = "yes">
    <resource>mime_types.txt</resource>
  </resources>
</thekogans_make>
